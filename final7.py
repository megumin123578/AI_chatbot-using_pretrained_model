import json
import ollama
from deep_translator import GoogleTranslator
import re
import speech_recognition as sr
from gtts import gTTS
import os
import time
import playsound
import pygame
import sys
import pyttsx3

conversation_file = "conversations_1.json"


# H√†m t·∫£i d·ªØ li·ªáu tr√≤ chuy·ªán t·ª´ file
def load_conversations():
    try:
        with open(conversation_file, "r",encoding='utf-8' ) as f:
            data = json.load(f)
            if isinstance(data, dict):
                return data
            else:
                return {}
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# H√†m l∆∞u d·ªØ li·ªáu tr√≤ chuy·ªán v√†o file
def save_conversations(conversations):
    with open(conversation_file, "w", encoding='utf-8') as f:
        json.dump(conversations, f, indent=4, ensure_ascii=False)

conversations = load_conversations()

# h√†m ki·ªÉm tra xem c√≥ d·∫•u h·ªèi ch·∫•m cu·ªëi c√¢u kh√¥ng
def ensure_question_type(text):
    text = text[0].upper() + text[1:]
    if text[-1] != '?':
        text += "?"
    return text

# H√†m ki·ªÉm tra xem c√¢u h·ªèi ƒë√£ c√≥ c√¢u tr·∫£ l·ªùi trong d·ªØ li·ªáu kh√¥ng
def get_learned_response(user_input):
    return conversations.get(user_input)

def translate_to_vietnamese(text):
    return GoogleTranslator(source='en', target='vi').translate(text)

def translate_to_english(text):
    return GoogleTranslator(source='vi', target='en').translate(text)

# H√†m ch√≠nh ƒë·ªÉ tr·∫£ l·ªùi
def respond(user_input):
    # Ki·ªÉm tra trong d·ªØ li·ªáu h·ªçc ƒë√£ c√≥ c√¢u tr·∫£ l·ªùi ch∆∞a
    user_input = ensure_question_type(user_input)
    learned_response = get_learned_response(user_input)
    if learned_response:
        return learned_response

    # D·ªãch c√¢u h·ªèi t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh
    translated_input = translate_to_english(user_input)
    

    try:
        # G·ª≠i c√¢u h·ªèi ƒë√£ d·ªãch ƒë·∫øn m√¥ h√¨nh
        response_obj = ollama.chat(model="llama3", messages=[{"role": "user", "content": translated_input},
                                                                {"role": "system", "content": "Answer briefly."}])
        print(response_obj)

        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng c·ªßa ph·∫£n h·ªìi
        if isinstance(response_obj, dict) and 'message' in response_obj:
            # L·∫•y n·ªôi dung ph·∫£n h·ªìi v√† lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i ch·ªØ c√°i
            response_text = response_obj['message']['content']
            response_text = re.sub(r'[^\w\s]', '', response_text, flags=re.UNICODE)
        else:
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n."

    except Exception as e:
        print(f"Error: {e}")
        return "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω ƒë·∫ßu v√†o c·ªßa b·∫°n."

    # D·ªãch c√¢u tr·∫£ l·ªùi sang ti·∫øng Vi·ªát
    translated_response = translate_to_vietnamese(response_text)
    
    # C·∫≠p nh·∫≠t c√¢u h·ªèi-ƒë√°p v√†o d·ªØ li·ªáu h·ªçc
    conversations[user_input] = translated_response
    save_conversations(conversations)

    return translated_response

def speak(text):
    engine = pyttsx3.init()



    voices = engine.getProperty('voices')


    engine.setProperty('voice', voices[1].id)
    engine.say(text)
    engine.runAndWait()

# B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p tr√≤ chuy·ªán
while True:
    

    #speech to text
    r = sr.Recognizer()
    with sr.Microphone() as source:
        audio_data = r.record(source, duration = 4)
        print('Recognizing...')
        try:
            text = r.recognize_google(audio_data, language='vi')
        except:
            text = ''

        print(text)


    user_input = text.lower()
    response = respond(user_input)
    speak(response)
    print(f"üê±: {response}")


