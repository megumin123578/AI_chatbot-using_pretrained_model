import tkinter as tk
from tkinter import messagebox
import speech_recognition as sr
import pyttsx3
import json
import ollama
from deep_translator import GoogleTranslator
import re
import speech_recognition as sr
from gtts import gTTS
import os
import time
import playsound
import pygame
import sys
conversation_file = "conversations_1.json"
# H√†m t·∫£i d·ªØ li·ªáu tr√≤ chuy·ªán t·ª´ file
def load_conversations():
    try:
        with open(conversation_file, "r",encoding='utf-8' ) as f:
            data = json.load(f)
            if isinstance(data, dict):
                return data
            else:
                return {}
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# H√†m l∆∞u d·ªØ li·ªáu tr√≤ chuy·ªán v√†o file
def save_conversations(conversations):
    with open(conversation_file, "w", encoding='utf-8') as f:
        json.dump(conversations, f, indent=4, ensure_ascii=False)

conversations = load_conversations()

# h√†m ki·ªÉm tra xem c√≥ d·∫•u h·ªèi ch·∫•m cu·ªëi c√¢u kh√¥ng
def ensure_question_type(text):
    text = text[0].upper() + text[1:]
    if text[-1] != '?':
        text += "?"
    return text

# H√†m ki·ªÉm tra xem c√¢u h·ªèi ƒë√£ c√≥ c√¢u tr·∫£ l·ªùi trong d·ªØ li·ªáu kh√¥ng
def get_learned_response(user_input):
    return conversations.get(user_input)

def translate_to_vietnamese(text):
    return GoogleTranslator(source='en', target='vi').translate(text)

def translate_to_english(text):
    return GoogleTranslator(source='vi', target='en').translate(text)

# H√†m ch√≠nh ƒë·ªÉ tr·∫£ l·ªùi
def respond(user_input):
    # Ki·ªÉm tra trong d·ªØ li·ªáu h·ªçc ƒë√£ c√≥ c√¢u tr·∫£ l·ªùi ch∆∞a
    user_input = ensure_question_type(user_input)
    learned_response = get_learned_response(user_input)
    if learned_response:
        return learned_response

    # D·ªãch c√¢u h·ªèi t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh
    translated_input = translate_to_english(user_input)
    

    try:
        # G·ª≠i c√¢u h·ªèi ƒë√£ d·ªãch ƒë·∫øn m√¥ h√¨nh
        response_obj = ollama.chat(model="gemma2:2b", messages=[{"role": "user", "content": translated_input},
                                                                {"role": "system", "content": "Answer briefly."}])
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng c·ªßa ph·∫£n h·ªìi
        if isinstance(response_obj, dict) and 'message' in response_obj:
            # L·∫•y n·ªôi dung ph·∫£n h·ªìi v√† lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i ch·ªØ c√°i
            response_text = response_obj['message']['content']
            response_text = re.sub(r'[^\w\s]', '', response_text, flags=re.UNICODE)
        else:
            return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n."

    except Exception as e:
        print(f"Error: {e}")
        return "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω ƒë·∫ßu v√†o c·ªßa b·∫°n."

    # D·ªãch c√¢u tr·∫£ l·ªùi sang ti·∫øng Vi·ªát
    translated_response = translate_to_vietnamese(response_text)
    
    # C·∫≠p nh·∫≠t c√¢u h·ªèi-ƒë√°p v√†o d·ªØ li·ªáu h·ªçc
    conversations[user_input] = translated_response
    save_conversations(conversations)

    return translated_response

# Kh·ªüi t·∫°o engine n√≥i
engine = pyttsx3.init()

def speak_text(text):
    voices = engine.getProperty('voices')


    engine.setProperty('voice', voices[1].id)
    engine.say(text)
    engine.runAndWait()

def listen_to_user():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        try:
            print("Listening...")
            audio_data = r.listen(source, timeout=5)  # L·∫Øng nghe √¢m thanh
            print("Recognizing...")
            text = r.recognize_google(audio_data, language='vi')  # Chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n
            print(f"Recognized: {text}")
            
            if text.strip():  # N·∫øu c√≥ n·ªôi dung nh·∫≠n di·ªán
                handle_response(text)  # G·ª≠i n·ªôi dung sang h√†m x·ª≠ l√Ω ph·∫£n h·ªìi
            else:
                messagebox.showinfo("Info", "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c gi·ªçng n√≥i, vui l√≤ng th·ª≠ l·∫°i!")
        except sr.UnknownValueError:
            messagebox.showerror("Error", "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c gi·ªçng n√≥i!")
        except sr.RequestError:
            messagebox.showerror("Error", "L·ªói k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• nh·∫≠n di·ªán!")
        except Exception as e:
            messagebox.showerror("Error", f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
    
def handle_response(user_input):
    if user_input.strip() == "":
        return  # Kh√¥ng x·ª≠ l√Ω n·∫øu ng∆∞·ªùi d√πng nh·∫≠p chu·ªói r·ªóng
    chat_log.insert(tk.END, "You: " + user_input + "\n", 'you_tag')
    chat_log.see(tk.END)
    entry_message.delete(0, tk.END)  # X√≥a n·ªôi dung nh·∫≠p li·ªáu sau khi g·ª≠i
    response = respond(user_input)
    root.after(500, lambda: show_bot_response(response))

def show_bot_response(response):
    chat_log.insert(tk.END, "Robot: " + response + "\n", 'robot_tag')
    chat_log.see(tk.END)
    speak_text(response)


# T·∫°o giao di·ªán
root = tk.Tk()
root.title("Voice ChatBot")
root.geometry("1200x800")  # Thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï
root.configure(bg="#2C2F33")  # M√†u n·ªÅn cho to√†n c·ª≠a s·ªï


# Khung hi·ªÉn th·ªã chat
chat_log = tk.Text(root, 
                   bg='#1A1A1D', 
                   fg="#FFEB55",
                   font= ("Helvetica", 14), 
                   state=tk.NORMAL, 
                   height=15, 
                   wrap="word")
chat_log.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

# ƒê·ªãnh nghƒ©a c√°c tag cho m√†u s·∫Øc
chat_log.tag_config("you_tag", foreground="#ffff00", font=("Helvetica", 14, "bold"))  # M√†u ƒë·ªè cam
chat_log.tag_config("robot_tag", foreground="#33ff57", font=("Helvetica", 14, "italic"))  # M√†u xanh l√° nh·∫°t

# Khung nh·∫≠p li·ªáu
entry_message = tk.Entry(root, width=70, bg='#DCE4C9', fg='#0C0C0C')
entry_message.pack(pady=5, padx=10, fill=tk.X)

# N√∫t g·ª≠i v√† n√≥i
btn_frame = tk.Frame(root, bg="#2C2F33") #set tr√πng m√†u v·ªõi n·ªÅn
btn_frame.pack(pady=10)

btn_send = tk.Button(btn_frame, 
                     text="Send", 
                     command=lambda: handle_response(entry_message.get()), 
                     font=("Helvetica", 14), 
                     padx=20, 
                     pady=10,
                     bg='#526E48',
                     fg='#FFEB55',
                     activebackground='#3E5236',
                     activeforeground='#FFEB55')

btn_send.pack(side=tk.LEFT, padx=10)

btn_listen = tk.Button(btn_frame, 
                       text="üé§ Speak", 
                       command=listen_to_user, 
                       font=("Helvetica", 14), 
                       padx=20, 
                       pady=10, 
                       bg='#526E48',
                       fg='#FFEB55', 
                       activebackground='#3E5236',  # M√†u n·ªÅn khi nh·∫•n
                       activeforeground='#FFEB55')  # M√†u ch·ªØ khi nh·∫•n
btn_listen.pack(side=tk.LEFT, padx=10)

label_status = tk.Label(root, 
                        text="Status: Idle", 
                        bg="#C2FFC7")
label_status.pack(pady=5)

# S·ª≠ d·ª•ng ph√≠m Enter ƒë·ªÉ g·ª≠i tin nh·∫Øn
root.bind('<Return>', lambda event: handle_response(entry_message.get()))

root.mainloop()
